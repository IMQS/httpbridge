// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_HTTPBRIDGE_HTTPBRIDGE_H_
#define FLATBUFFERS_GENERATED_HTTPBRIDGE_HTTPBRIDGE_H_

#include "flatbuffers/flatbuffers.h"


namespace httpbridge {

struct TxHeaderLine;
struct TxFrame;

enum TxFrameType {
  TxFrameType_Header = 0,
  TxFrameType_Body = 1,
  TxFrameType_Abort = 2
};

inline const char **EnumNamesTxFrameType() {
  static const char *names[] = { "Header", "Body", "Abort", nullptr };
  return names;
}

inline const char *EnumNameTxFrameType(TxFrameType e) { return EnumNamesTxFrameType()[e]; }

enum TxHttpVersion {
  TxHttpVersion_Http10 = 0,
  TxHttpVersion_Http11 = 1,
  TxHttpVersion_Http2 = 2
};

inline const char **EnumNamesTxHttpVersion() {
  static const char *names[] = { "Http10", "Http11", "Http2", nullptr };
  return names;
}

inline const char *EnumNameTxHttpVersion(TxHttpVersion e) { return EnumNamesTxHttpVersion()[e]; }

enum TxFrameFlags {
  TxFrameFlags_Final = 1
};

inline const char **EnumNamesTxFrameFlags() {
  static const char *names[] = { "Final", nullptr };
  return names;
}

inline const char *EnumNameTxFrameFlags(TxFrameFlags e) { return EnumNamesTxFrameFlags()[e - TxFrameFlags_Final]; }

struct TxHeaderLine FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<uint8_t> *key() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(4); }
  const flatbuffers::Vector<uint8_t> *value() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(6); }
  uint16_t id() const { return GetField<uint16_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* key */) &&
           verifier.Verify(key()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* value */) &&
           verifier.Verify(value()) &&
           VerifyField<uint16_t>(verifier, 8 /* id */) &&
           verifier.EndTable();
  }
};

struct TxHeaderLineBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> key) { fbb_.AddOffset(4, key); }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value) { fbb_.AddOffset(6, value); }
  void add_id(uint16_t id) { fbb_.AddElement<uint16_t>(8, id, 0); }
  TxHeaderLineBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TxHeaderLineBuilder &operator=(const TxHeaderLineBuilder &);
  flatbuffers::Offset<TxHeaderLine> Finish() {
    auto o = flatbuffers::Offset<TxHeaderLine>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<TxHeaderLine> CreateTxHeaderLine(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> key = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value = 0,
   uint16_t id = 0) {
  TxHeaderLineBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_key(key);
  builder_.add_id(id);
  return builder_.Finish();
}

struct TxFrame FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  TxFrameType frametype() const { return static_cast<TxFrameType>(GetField<int8_t>(4, 0)); }
  TxHttpVersion version() const { return static_cast<TxHttpVersion>(GetField<int8_t>(6, 0)); }
  uint8_t flags() const { return GetField<uint8_t>(8, 0); }
  uint64_t channel() const { return GetField<uint64_t>(10, 0); }
  uint64_t stream() const { return GetField<uint64_t>(12, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<TxHeaderLine>> *headers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TxHeaderLine>> *>(14); }
  const flatbuffers::Vector<uint8_t> *body() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, 4 /* frametype */) &&
           VerifyField<int8_t>(verifier, 6 /* version */) &&
           VerifyField<uint8_t>(verifier, 8 /* flags */) &&
           VerifyField<uint64_t>(verifier, 10 /* channel */) &&
           VerifyField<uint64_t>(verifier, 12 /* stream */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* headers */) &&
           verifier.Verify(headers()) &&
           verifier.VerifyVectorOfTables(headers()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* body */) &&
           verifier.Verify(body()) &&
           verifier.EndTable();
  }
};

struct TxFrameBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_frametype(TxFrameType frametype) { fbb_.AddElement<int8_t>(4, static_cast<int8_t>(frametype), 0); }
  void add_version(TxHttpVersion version) { fbb_.AddElement<int8_t>(6, static_cast<int8_t>(version), 0); }
  void add_flags(uint8_t flags) { fbb_.AddElement<uint8_t>(8, flags, 0); }
  void add_channel(uint64_t channel) { fbb_.AddElement<uint64_t>(10, channel, 0); }
  void add_stream(uint64_t stream) { fbb_.AddElement<uint64_t>(12, stream, 0); }
  void add_headers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TxHeaderLine>>> headers) { fbb_.AddOffset(14, headers); }
  void add_body(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> body) { fbb_.AddOffset(16, body); }
  TxFrameBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TxFrameBuilder &operator=(const TxFrameBuilder &);
  flatbuffers::Offset<TxFrame> Finish() {
    auto o = flatbuffers::Offset<TxFrame>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<TxFrame> CreateTxFrame(flatbuffers::FlatBufferBuilder &_fbb,
   TxFrameType frametype = TxFrameType_Header,
   TxHttpVersion version = TxHttpVersion_Http10,
   uint8_t flags = 0,
   uint64_t channel = 0,
   uint64_t stream = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TxHeaderLine>>> headers = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> body = 0) {
  TxFrameBuilder builder_(_fbb);
  builder_.add_stream(stream);
  builder_.add_channel(channel);
  builder_.add_body(body);
  builder_.add_headers(headers);
  builder_.add_flags(flags);
  builder_.add_version(version);
  builder_.add_frametype(frametype);
  return builder_.Finish();
}

inline const TxFrame *GetTxFrame(const void *buf) { return flatbuffers::GetRoot<TxFrame>(buf); }

inline bool VerifyTxFrameBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<TxFrame>(); }

inline void FinishTxFrameBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<TxFrame> root) { fbb.Finish(root); }

}  // namespace httpbridge

#endif  // FLATBUFFERS_GENERATED_HTTPBRIDGE_HTTPBRIDGE_H_
